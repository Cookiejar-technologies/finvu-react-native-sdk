{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, NativeModulesProxy, EventSubscription } from 'expo-modules-core';\nimport FinvuModule from './FinvuModule';\nimport type { ConsentDetail, DiscoverAccountsResponse, DiscoveredAccount, FinvuConfig, FipDetails, FipsAllFIPOptionsResponse, LinkedAccountDetails } from './Finvu.types';\n\n// Define the event types for the EventEmitter\ntype FinvuEvents = {\n  onConnectionStatusChange: (event: { status: string }) => void;\n  onLoginOtpReceived: (event: any) => void;\n  onLoginOtpVerified: (event: any) => void;\n};\n\nconst emitter = new EventEmitter<FinvuEvents>(FinvuModule ?? NativeModulesProxy.Finvu);\n\n// Define a consistent Result type for all responses\nexport type Result<T> = \n  | { isSuccess: true, data: T }  // Success response\n  | { isSuccess: false, error: { code: string, message: string } };  // Error response\n\n// Helper function to handle promises and standardize errors\nasync function handleResult<T>(promise: Promise<any>, errorMessage: string): Promise<Result<T>> {\n  try {\n    const result = await promise;\n    \n    // Parse JSON if result is a string that looks like JSON\n    let data: T;\n    if (typeof result === 'string' && result.startsWith('{')) {\n      try {\n        data = JSON.parse(result);\n      } catch {\n        data = result as unknown as T;\n      }\n    } else {\n      data = result as T;\n    }\n    \n    return { isSuccess: true, data }; \n  } catch (error: any) {\n    console.error(`${errorMessage}:`, error);\n    return { \n      isSuccess: false, \n      error: { \n        code: error?.code || 'UNKNOWN_ERROR',\n        message: error?.message || errorMessage\n      } \n    };\n  }\n}\n\n/**\n * Initialize the Finvu SDK with configuration options\n * @param config Configuration for the Finvu SDK\n */\nexport async function initializeWith(config: FinvuConfig): Promise<Result<string>> {\n  return handleResult(FinvuModule.initializeWith(config), 'Initialization failed');\n}\n\n/**\n * Connect to the Finvu service\n */\nexport async function connect(): Promise<Result<void>> {\n  return handleResult(FinvuModule.connect(), 'Connection failed');\n}\n\n/**\n * Disconnect from the Finvu service\n */\nexport async function disconnect() : Promise<Result<void>> {\n  return handleResult(FinvuModule.disconnect(), 'Failed to disconnect from finvu');\n}\n\n/**\n * Checks if the user is currently connected to the Finvu service.\n *\n * @returns A `Result` object containing a boolean indicating connection status.\n * Returns `true` if connected, `false` otherwise.\n */\nexport async function isConnected(): Promise<Result<boolean>> {\n  return handleResult(FinvuModule.isConnected(), 'Failed to fetch connection status from Finvu.');\n}\n\n/**\n * Checks if there is an active session with the Finvu service.\n *\n * @returns A `Result` object containing a boolean:\n * - `true` if a session exists,\n * - `false` if no session is found.\n */\nexport async function hasSession(): Promise<Result<boolean>> {\n  return handleResult(FinvuModule.hasSession(), 'Unable to determine if a Finvu session exists.');\n}\n\n/**\n * Login with username or mobile number\n * @param username Username (email format)\n * @param mobileNumber Mobile number\n * @param consentHandleId Consent handle ID\n */\nexport async function loginWithUsernameOrMobileNumber(\n  username: string, \n  mobileNumber: string, \n  consentHandleId: string\n): Promise<Result<{ reference: string }>> {\n  return handleResult(\n    FinvuModule.loginWithUsernameOrMobileNumber(username, mobileNumber, consentHandleId),\n    'Login failed'\n  );\n}\n\n/**\n * Verify login OTP\n * @param otp OTP received by the user\n * @param otpReference Reference from the login response\n */\nexport async function verifyLoginOtp(\n  otp: string, \n  otpReference: string\n): Promise<Result<{ userId: string }>> {\n  return handleResult(\n    FinvuModule.verifyLoginOtp(otp, otpReference),\n    'OTP verification failed'\n  );\n}\n\n/**\n * Discover accounts at a financial institution\n * @param fipId Financial Information Provider ID\n * @param fiTypes Financial Information types\n * @param identifiers Array of identifier objects\n */\nexport async function discoverAccounts(\n  fipId: string,\n  fiTypes: string[],\n  identifiers: { category: string; type: string; value: string }[]\n): Promise<Result<DiscoverAccountsResponse>> {\n  return handleResult(\n    FinvuModule.discoverAccounts(fipId, fiTypes, identifiers),\n    'Discovering accounts failed'\n  );\n}\n\n/**\n * Get a list of all FIP options\n */\nexport async function fipsAllFIPOptions(): Promise<Result<FipsAllFIPOptionsResponse>> {\n  return handleResult(FinvuModule.fipsAllFIPOptions(), 'Fetching FIPs failed');\n}\n\n/**\n * Fetch linked accounts\n */\nexport async function fetchLinkedAccounts(): Promise<Result<{ linkedAccounts: any[] }>> {\n  return handleResult(FinvuModule.fetchLinkedAccounts(), 'Fetching linked accounts failed');\n}\n\n/**\n * Link accounts\n * @param accounts Array of discovered accounts\n * @param fipDetails FIP details object\n */\nexport async function linkAccounts(\n  accounts: DiscoveredAccount[],\n  fipDetails: FipDetails\n): Promise<Result<{ linkedAccounts?: any[], referenceNumber?: string }>> {\n  return handleResult(\n    FinvuModule.linkAccounts(\n      JSON.parse(JSON.stringify(accounts)),\n      JSON.parse(JSON.stringify(fipDetails))\n    ),\n    'Linking accounts failed'\n  );\n}\n\n/**\n * Confirm account linking\n * @param referenceNumber Reference number from linkAccounts response\n * @param otp OTP received by the user\n */\nexport async function confirmAccountLinking(\n  referenceNumber: string, \n  otp: string\n): Promise<Result<any>> {\n  return handleResult(\n    FinvuModule.confirmAccountLinking(referenceNumber, otp),\n    'Confirming account linking failed'\n  );\n}\n\n/**\n * Approve consent request\n * @param consentDetails Consent details object\n * @param finvuLinkedAccounts Array of linked account details\n */\nexport async function approveConsentRequest(\n  consentDetails: ConsentDetail, \n  finvuLinkedAccounts: LinkedAccountDetails[]\n): Promise<Result<any>> {\n  return handleResult(\n    FinvuModule.approveConsentRequest(\n      JSON.parse(JSON.stringify(consentDetails)),\n      JSON.parse(JSON.stringify(finvuLinkedAccounts))\n    ),\n    'Approving consent failed'\n  );\n}\n\n/**\n * Deny consent request\n * @param consentRequestDetailInfo Consent details object\n */\nexport async function denyConsentRequest(\n  consentRequestDetailInfo: ConsentDetail\n): Promise<Result<any>> {\n  return handleResult(\n    FinvuModule.denyConsentRequest(JSON.parse(JSON.stringify(consentRequestDetailInfo))),\n    'Denying consent failed'\n  );\n}\n\n/**\n * Fetch FIP details\n * @param fipId Financial Information Provider ID\n */\nexport async function fetchFipDetails(fipId: string): Promise<Result<FipDetails>> {\n  return handleResult(FinvuModule.fetchFipDetails(fipId), 'Fetching FIP details failed');\n}\n\n/**\n * Get entity information\n * @param entityId Entity ID\n * @param entityType Entity type\n */\nexport async function getEntityInfo(\n  entityId: string, \n  entityType: string\n): Promise<Result<any>> {\n  return handleResult(FinvuModule.getEntityInfo(entityId, entityType), 'Getting entity info failed');\n}\n\n/**\n * Get consent request details\n * @param consentHandleId Consent handle ID\n */\nexport async function getConsentRequestDetails(\n  consentHandleId: string\n): Promise<Result<ConsentDetail>> {\n  return handleResult(FinvuModule.getConsentRequestDetails(consentHandleId), 'Fetching consent request details failed');\n}\n\n/**\n * Logout from Finvu\n */\nexport async function logout(): Promise<Result<void>> {\n  return handleResult(FinvuModule.logout(), 'Logout failed');\n}\n\n/**\n * Add listener for connection status changes\n */\nexport function addConnectionStatusChangeListener(\n  listener: (event: { status: string }) => void\n): EventSubscription {\n  return emitter.addListener('onConnectionStatusChange', listener);\n}\n\n/**\n * Add listener for login OTP received\n */\nexport function addLoginOtpReceivedListener(\n  listener: (event: any) => void\n): EventSubscription {\n  return emitter.addListener('onLoginOtpReceived', listener);\n}\n\n/**\n * Add listener for login OTP verified\n */\nexport function addLoginOtpVerifiedListener(\n  listener: (event: any) => void\n): EventSubscription {\n  return emitter.addListener('onLoginOtpVerified', listener);\n}\n\nexport { default } from './FinvuModule';\nexport * from './Finvu.types';"]}